pipeline {
  environment {
    IMAGE = "core.harbor.bignetlab.com/library/gl-dev"
    registryCredential = 'harbor'
    dockerImage = ''
    ARGOCD_SERVER="192.168.3.52"
    APP_NAME="debian-test-k8s-gl"
    HARBOR_CREDS = credentials('harbor')
    ARGOCD_CREDS = credentials('argocd-credentials')
    }
    agent any
    stages {       
        stage('Prepare') {
            steps {
                checkout([$class: 'GitSCM',
                branches: [[name: "origin/main"]],
                doGenerateSubmoduleConfigurations: false,
                submoduleCfg: [],
                userRemoteConfigs: [[
                    url: 'https://gitlab.com/gilangvperdana/jenkins-argocd.git']]
                ])
            }
        }
        stage('Docker_Build') {
          steps{
            script {
              dockerImage = docker.build IMAGE
            }
          }
        }
        stage('Docker_Login') {
             steps {
                        sh '''
                        docker login https://core.harbor.bignetlab.com -u="${HARBOR_CREDS_USR}" -p="${HARBOR_CREDS_PSW}"
                        '''
               }
        }
        stage('Docker_Push') {
          steps{
            script {
              docker.withRegistry( 'https://core.harbor.bignetlab.com', registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                 dockerImage.push('latest')
              }
            }
          }
        }
        stage ('Deploy_K8S') {
             steps {
                        sh '''
                        argocd login --insecure $ARGOCD_SERVER --username ${ARGOCD_CREDS_USR} --password ${ARGOCD_CREDS_PSW}
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd app create $APP_NAME --project default --repo https://gitlab.com/gilangvperdana/jenkins-argocd.git --path ./ --dest-namespace gl --dest-server https://kubernetes.default.svc --upsert
                        IMAGE_DIGEST=$(docker image inspect $IMAGE:latest -f '{{join .RepoDigests ","}}')
                        ## Customize image 
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --grpc-web app set $APP_NAME --kustomize-image $IMAGE_DIGEST
                        
                        # Deploy to ArgoCD
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --grpc-web app sync $APP_NAME --force 
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --grpc-web app wait $APP_NAME --timeout 600
                        '''
               }
            }
        }
    }

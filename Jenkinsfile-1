pipeline {
  environment {
    IMAGE = "rjhaikal/k8s-debian-test"
    registryCredential = 'dockerhub'
    dockerImage = ''
    ARGOCD_SERVER="argocd.bignetlab.com"
    APP_NAME="debian-test-k8s"
    }
    agent any
    stages {       
        stage('Prepare') {
            steps {
                checkout([$class: 'GitSCM',
                branches: [[name: "origin/master"]],
                doGenerateSubmoduleConfigurations: false,
                submoduleCfg: [],
                userRemoteConfigs: [[
                    url: 'https://github.com/rjhaikal/jenkins-argo.git']]
                ])
            }
        }
        stage('Docker_Build') {
          steps{
            script {
              dockerImage = docker.build IMAGE
            }
          }
        }
        stage('Docker_Push') {
          steps{
            script {
              docker.withRegistry( 'https://registry.hub.docker.com', registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                 dockerImage.push('latest')
              }
            }
          }
        }
        stage ('Deploy_K8S') {
             steps {
                     withCredentials([string(credentialsId: "argocd-deploy-role", variable: 'ARGOCD_AUTH_TOKEN')]) {
                        sh '''
                        IMAGE_DIGEST=$(docker image inspect $IMAGE:latest -f '{{join .RepoDigests ","}}')
                        # Customize image 
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --grpc-web app set $APP_NAME --kustomize-image $IMAGE_DIGEST
                        
                        # Deploy to ArgoCD
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --grpc-web app sync $APP_NAME --force
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --grpc-web app wait $APP_NAME --timeout 600
                        '''
               }
            }
        }
    }
}